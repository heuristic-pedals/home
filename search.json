[
  {
    "objectID": "blog/posts/simple-analytics/index.html",
    "href": "blog/posts/simple-analytics/index.html",
    "title": "Alternative Analytics for quarto Sites?",
    "section": "",
    "text": "This guide will show you how to:"
  },
  {
    "objectID": "blog/posts/simple-analytics/index.html#introduction",
    "href": "blog/posts/simple-analytics/index.html#introduction",
    "title": "Alternative Analytics for quarto Sites?",
    "section": "Introduction",
    "text": "Introduction\nWhen I started this blog I did not want to add site analytics. Partly because I do not feel this is important as a small blogging site. But mostly because I personally find user tracking, at the very least, an ethically grey area. It is certainly useful to help gain feedback on the extent, relevance, and engagement of online content. However, this is not without its bad side, in the context of spider-web-like marketing campaigns and user tracking with little to no care for privacy.\nThe position is also quite tricky when it comes to using quarto (which this blogging site uses). It is an excellent tool for scientific writing and website development, but right now it only provides easy integration for Google Analytics. Having only this single option is far from ideal. It supports a monopoly towards an already powerful tech giant who also share user data with third parties for monetary purposes.\nAfter some online research, my decision on site analytics changed thanks to a viable alternative option. This post looks to share another, privacy-focused, approach to site analytics when using quarto‚Ä¶ Step forward Simple Analytics!"
  },
  {
    "objectID": "blog/posts/simple-analytics/index.html#what-is-simple-analytics",
    "href": "blog/posts/simple-analytics/index.html#what-is-simple-analytics",
    "title": "Alternative Analytics for quarto Sites?",
    "section": "What is Simple Analytics?",
    "text": "What is Simple Analytics?\nSimple Analytics describe themselves as:\n\n‚ÄúA privacy-first Google Analytics alternative.‚Äù\n\nThey comply with a range of privacy policies, including GDPR, whilst using no site cookies and storing no personal details. Their documentation is excellent, giving very detailed insights into their approaches and the metrics they calculate. They also have a thorough comparison with Google Analytics and have open-sourced their analytics scripts. The dashboard and analytics they provide is clean, concise, and simple to use - an live demo is hosted on their website. Finally, I think their pricing structure is fair, with a free tier, options for students, and a range of paid tiers to suit different needs.\nPutting all this together, with a strong focus on user privacy and pulling on the heart strings of my inner-geek, introducing Simple Analytics to this site was a no-brainer! If you have a site that uses analytics (especially one built with quarto) I hope this article resonates with you as discovering Simple Analytics did for me!"
  },
  {
    "objectID": "blog/posts/simple-analytics/index.html#adding-simple-analytics-to-quarto-websites",
    "href": "blog/posts/simple-analytics/index.html#adding-simple-analytics-to-quarto-websites",
    "title": "Alternative Analytics for quarto Sites?",
    "section": "Adding Simple Analytics to quarto Websites",
    "text": "Adding Simple Analytics to quarto Websites\n\n\n\n\n\n\nAlways use the latest version of the Simple Analytics setup‚Ä¶\n\n\n\n\n\nDo not directly copy the example .html and _quarto.yml files linked within this section without checking the Simple Analytics documentation first. Always revert back to and use the latest installation script syntax shared by Simple Analytics to remain up-to-date. The links to the heuristic-pedals GitHub repo home are purely shared for example purposes only.\n\n\n\nThe following instructions show how to add Simple Analytics to a Quarto Website:\n\nGo to the Simple Analytics documentation script set-up page and copy the HTML/java snippet.\nCreate a new .html file and add the HTML/java snippet.\nIn your _quarto.yml configuration file, add the relative file path to the newly created HTML file in step 2, at the format &gt; HTML &gt; include-after-body location.\nCommit and deploy these changes to your site.\nCreate a Simple Analytics log-in and then follow the on-screen instructions to add your domain to your account.\n\nAs the last stage of step 5, Simple Analytics will search for the presence of this script in your website. Within a few minutes you will be set-up and ready to go ü•≥\nFor a firsthand demonstration of steps 2 and 3, you can check out example .html and _quarto.yml files within in the GitHub repo used for this site."
  },
  {
    "objectID": "blog/posts/rust-pre-commits/index.html",
    "href": "blog/posts/rust-pre-commits/index.html",
    "title": "Rust pre-commit hooks",
    "section": "",
    "text": "This guide will show you how to:"
  },
  {
    "objectID": "blog/posts/rust-pre-commits/index.html#introduction",
    "href": "blog/posts/rust-pre-commits/index.html#introduction",
    "title": "Rust pre-commit hooks",
    "section": "Introduction",
    "text": "Introduction\nHaving code checks, linting, formatting, and tests run automatically during CI runs is very advantageous. In particular, it helps enforce code standards and quality. From a rust perspective, having cargo on hand to do this is very helpful. However, executing these locally during development is a manual process, which can sometimes cause issues - as humans we forget a lot! In those cases, code could be pushed to a CI runner which then fails because there were problems when running the linter, formatter, and/or tests.\nPre-commits are renowned in many programming languages (perhaps most notably the pre-commit framework itself). Pre-commit hooks can help prevent these issues by executing checks automatically before committing.\nThis guide explores two options for adding pre-commit hooks within rust projects - see the Setting up pre-commit hooks section for more details. Both rely on cargo‚Äôs additional components rustfmt formatter and clippy linter, so the following section starts by showing how these can be added to cargo.\n\n\n\n\n\n\nPre-commit hooks aren‚Äôt infallible‚Ä¶\n\n\n\n\n\n‚Ä¶ they rely on users to install the pre-commit hooks locally, which presents another opportunity for us humans to make mistakes (by not installing before committing, for example). In this case pre-receive hooks maybe a better option. However, pre-receive hooks on GitHub seem to be an Enterprise only solution üòû."
  },
  {
    "objectID": "blog/posts/rust-pre-commits/index.html#adding-rustfmt-and-clippy",
    "href": "blog/posts/rust-pre-commits/index.html#adding-rustfmt-and-clippy",
    "title": "Rust pre-commit hooks",
    "section": "Adding rustfmt and clippy",
    "text": "Adding rustfmt and clippy\nrustfmt and clippy can be added as additional components to cargo.\n\nInstall rustfmt:\n\nrustup component add rustfmt\n\nInstall clippy:\n\nrustup component add clippy"
  },
  {
    "objectID": "blog/posts/rust-pre-commits/index.html#setting-up-pre-commit-hooks",
    "href": "blog/posts/rust-pre-commits/index.html#setting-up-pre-commit-hooks",
    "title": "Rust pre-commit hooks",
    "section": "Setting up pre-commit hooks",
    "text": "Setting up pre-commit hooks\nThis section provides two sets of instructions for adding pre-commit hooks within a rust project. Option 1 uses pre-commit, which is a useful approach for those looking for an ‚Äòoff-the-shelf‚Äô solution. Option 2 explores writing hooks directly, meaning no additional external dependencies are required.\nThey add the following hooks:\n\n\n\n\n\n\n\nHook\nDescription\n\n\n\n\ncargo check\nCheck source code and dependencies for compilation errors.\n\n\ncargo fmt\nCheck source code for formatting inconsistencies.\n\n\ncargo clippy\nRun lints to check for common issues.\n\n\ncargo test\nRun whole test suite.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe cargo test hook is only available when using Option 2.\n\n\n\nOption 1: Using pre-commit\nThe instructions in this section use pre-commit and the currently supported rust pre-commit hooks. See here for other supported hooks.\n\nFollow the latest pre-commit installation instructions.\nWithin your git version controlled rust project root directory, create a .pre-commit-config.yaml file:\n\ntouch .pre-commit-config.yaml\n\nOpen the file and add the following contents:\n\nrepos:\n-   repo: https://github.com/doublify/pre-commit-rust\n    rev: v1.0\n    hooks:\n    -   id: cargo-check\n        args: [\"--workspace\"]\n    -   id: fmt\n        args: [\"--\", \"--check\"]\n    -   id: clippy\n        args: [\"--\", \"-D\", \"warnings\"]\n\n\n\n\n\n\nNote\n\n\n\nCheck and update rev to the latest version before use. The above repo url will provide the latest version number.\n\n\n\nInstall the pre-commits:\n\npre-commit install\n\nCheck the pre-commit hooks are working by calling:\n\npre-commit run --all-files\n\nEnjoy using rust with pre-commits ü•≥\n\n\n\nOption 2: Writing own hooks\n\n\n\n\n\n\nNote\n\n\n\nThe instruction in this section will work on MacOS and Linux, but not on Windows.\n\n\nThis approach works by adding a script that executes when attempting to commit. It runs the necessary cargo compilation, formatting, and linting checks, then blocks the commit if an issue is detected at any stage.\nThe following instructions add the same check, rustfmt, and clippy pre-commit checks as shown in the previous section. To demonstrate the flexibility of this approach, there is a version of the script where the test suite is also executed as part of the pre-commit checks (which is not currently achievable with the previous option). Adding test suite execution is purely a design choice, trading off between execution speed and risk of any changes causing test failures on the runners.\n\nWithin your git version controlled rust project directory, create a pre-commit file in the .git/hooks/ directory:\n\ntouch .git/hooks/pre-commit\n\nOpen the file, and add the following content:\n\n\nWith cargo test hookWithout cargo test hook\n\n\n#!/bin/sh\n\nset -eu\n\n# formatting variables\nGREEN='\\033[0;32m'\nRED='\\033[0;31m'\nNC='\\033[0m' # No Color\nBOLD=$(tput bold)\nNORM=$(tput sgr0)\n\necho \"Running pre-commit checks...\"\n\n# cargo check hook\nif ! cargo check --workspace\nthen\n    echo -e \"cargo check: ......... ${RED}nok${NC}\"\n    echo -e \"${RED}Pre-commit: Issues detected when calling 'cargo check'.\"\n    exit 1\nfi\n\necho -e \"cargo check: ......... ${GREEN}ok${NC}\"\n\n# cargo rustfmt hook\nif ! cargo fmt -- --check\nthen\n    echo -e \"cargo rustfmt: ....... ${RED}nok${NC}\"\n    echo -e \"${RED}Pre-commit: Code style issues detected with rustfmt.\"\n    exit 1\nfi\n\necho -e \"cargo rustfmt: ....... ${GREEN}ok${NC}\"\n\n# cargo clippy hook\nif ! cargo clippy --all-targets -- -D warnings\nthen\n    echo -e \"cargo clippy: ........ ${RED}nok${NC}\"\n    echo -e \"${RED}Pre-commit: Issues detected by clippy.\"\n    exit 1\nfi\n\necho -e \"cargo clippy: ........ ${GREEN}ok${NC}\"\n\n# cargo test hook\nif ! cargo test\nthen\n    echo -e \"cargo test: .......... ${RED}nok${NC}\" \n    echo -e \"${RED}Pre-commit: Issues were detected when running the test suite.\" \n    exit 1\nfi\n\necho -e \"cargo test: .......... ${GREEN}ok${NC}\"\n\necho -e \"\\n${GREEN}${BOLD}Success: ${NC}${NORM}All pre-commit checks passed ‚úÖ\\n\"\n\nexit 0\n\n\n#!/bin/sh\n\nset -eu\n\n# formatting variables\nGREEN='\\033[0;32m'\nRED='\\033[0;31m'\nNC='\\033[0m' # No Color\nBOLD=$(tput bold)\nNORM=$(tput sgr0)\n\necho \"Running pre-commit checks...\"\n\n# cargo check hook\nif ! cargo check --workspace\nthen\n    echo -e \"cargo check: ......... ${RED}nok${NC}\"\n    echo -e \"${RED}Pre-commit: Issues detected when calling 'cargo check'.\"\n    exit 1\nfi\n\necho -e \"cargo check: ......... ${GREEN}ok${NC}\"\n\n# cargo rustfmt hook\nif ! cargo fmt -- --check\nthen\n    echo -e \"cargo rustfmt: ....... ${RED}nok${NC}\"\n    echo -e \"${RED}Pre-commit: Code style issues detected with rustfmt.\"\n    exit 1\nfi\n\necho -e \"cargo rustfmt: ....... ${GREEN}ok${NC}\"\n\n# cargo clippy hook\nif ! cargo clippy --all-targets -- -D warnings\nthen\n    echo -e \"cargo clippy: ........ ${RED}nok${NC}\"\n    echo -e \"${RED}Pre-commit: Issues detected by clippy.\"\n    exit 1\nfi\n\necho -e \"cargo clippy: ........ ${GREEN}ok${NC}\"\n\necho -e \"\\n${GREEN}${BOLD}Success: ${NC}${NORM}All pre-commit checks passed ‚úÖ\\n\"\n\nexit 0\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe above code in step 2 is inspired by a solution posted in a deaddabe blog. This is built on here by adding additional hooks and CLI formatting.\n\n\n\nMake this file executable:\n\nchmod +x .git/hooks/pre-commit\n\nCheck the pre-commit hooks are working by calling:\n\nbash .git/hooks/pre-commit\n\nEnjoy using rust with pre-commits ü•≥"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Heuristic Pedals",
    "section": "",
    "text": "A data scientist, ex-engineer, and even ex-er-physicist mainly writing about python and rust. This website serves as a place for me to record useful things I pick up and to improve my writing skills. At the same time I hope you find the content interesting and helpful too!\n\nWhere next?\n\nblog - a range of posts covering software and coding topics.\ncodebases - summary of heuristic-pedals code repositories."
  },
  {
    "objectID": "codebases/index.html",
    "href": "codebases/index.html",
    "title": "Codebases",
    "section": "",
    "text": "Below is a summary of heuristic-pedals codebases. If you‚Äôd like to collaborate head over to GitHub.\n\n\n\n\n\n\n\n\nPython | In Development\nEasily add assumptions and caveats to documentation.\nGitHub Docs PyPi\n\n\n\n\n\n\n\n\n\n\n\nRust | In Development\nAn ATOC.CIF to GTFS converter written in rust.\nGitHub Docs\n\n\n\n\n\n\n\n\n\n\n\nquarto | In Development\nSource code for this website.\nGithub\n\n\n\n\n\n\n\n\n\n\n\nRust | Mature\nA small grep-like implementation in rust. Searches for a sub-string pattern within lines of a single file and returns them.\nGitHub Docs"
  },
  {
    "objectID": "codebases/index.html#assumpdoc",
    "href": "codebases/index.html#assumpdoc",
    "title": "Codebases",
    "section": "",
    "text": "Python | In Development\nEasily add assumptions and caveats to documentation.\nGitHub Docs PyPi"
  },
  {
    "objectID": "codebases/index.html#atoc2gtfs",
    "href": "codebases/index.html#atoc2gtfs",
    "title": "Codebases",
    "section": "",
    "text": "Rust | In Development\nAn ATOC.CIF to GTFS converter written in rust.\nGitHub Docs"
  },
  {
    "objectID": "codebases/index.html#home",
    "href": "codebases/index.html#home",
    "title": "Codebases",
    "section": "",
    "text": "quarto | In Development\nSource code for this website.\nGithub"
  },
  {
    "objectID": "codebases/index.html#minigrep",
    "href": "codebases/index.html#minigrep",
    "title": "Codebases",
    "section": "",
    "text": "Rust | Mature\nA small grep-like implementation in rust. Searches for a sub-string pattern within lines of a single file and returns them.\nGitHub Docs"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog Posts",
    "section": "",
    "text": "Welcome to the blog posts section! Use the dropdown, search box, and category filters to look for posts.\n\n\n\n\n\n\nEach post is categorised by at least one tag using the Di√°taxis framework‚Ä¶\n\n\n\n\n\n\nexplanation: discussions focusing on understanding something.\nhow-to: concise instructions for getting something done.\nreference: information on how something works or how to work with it.\ntutorial: lesson and learning oriented examples of something.\n\n\n\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nRust pre-commit hooks\n\n\n6 min\n\n\n\nrust\n\n\nhow-to\n\n\n\nHow to add git pre-commit hooks to rust projects.\n\n\n\n2024-06-01\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlternative Analytics for quarto Sites?\n\n\n4 min\n\n\n\nquarto\n\n\nhow-to\n\n\n\nHow to add Simple Analytics to a quarto website.\n\n\n\n2024-05-19\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n‚ÄòJazzing Up‚Äô zsh with oh-my-zsh\n\n\n4 min\n\n\n\ncli\n\n\nhow-to\n\n\n\nHow to set-up oh-my-zsh with some helpful plugins and themes.\n\n\n\n2024-05-06\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/posts/oh-my-zsh-setup/index.html",
    "href": "blog/posts/oh-my-zsh-setup/index.html",
    "title": "‚ÄòJazzing Up‚Äô zsh with oh-my-zsh",
    "section": "",
    "text": "This guide will show you how to:"
  },
  {
    "objectID": "blog/posts/oh-my-zsh-setup/index.html#installation",
    "href": "blog/posts/oh-my-zsh-setup/index.html#installation",
    "title": "‚ÄòJazzing Up‚Äô zsh with oh-my-zsh",
    "section": "Installation",
    "text": "Installation\nFollow these steps to install oh-my-zsh:\n\nRetrieve and execute the installation script (located in the main branch of the oh-my-zsh GitHub repo):\n\nsh -c \"$(curl -fsSL \\\n    https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n\nYou may then need to restart your terminal session for these changes to take effect.\n\nThat‚Äôs it, the base installation of oh-my-zsh is then ready to go!"
  },
  {
    "objectID": "blog/posts/oh-my-zsh-setup/index.html#plugins",
    "href": "blog/posts/oh-my-zsh-setup/index.html#plugins",
    "title": "‚ÄòJazzing Up‚Äô zsh with oh-my-zsh",
    "section": "Plugins",
    "text": "Plugins\noh-my-zsh comes with a wide range of built-in plugins. These are listed on the plugins page of the oh my zsh website.\nHowever, some plugins (mainly custom ones) need to be installed before use. The installing plugins section shows you how to install two such useful plugins: zsh-auto-suggestion and zsh-syntax-highlighting.\nThe adding/modifying plugins section walks you through how to add new, and change the configuration of, your plugins. This section is applicable to both built-in and custom plugins.\n\nInstalling Plugins\n\nAuto-suggestion\nThe zsh-auto-suggestion plugin recommends commands as you type in the terminal based on your recent history and completions. It can be installed as follows:\n\nClone the plugin from the GitHub repository into the local custom plugins directory:\n\ngit clone https://github.com/zsh-users/zsh-autosuggestions \\\n    ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\nAdd the plugin to your oh-my-zsh configuration as outlined in the adding/modifying plugins section.\n\nThat‚Äôs it! For alternative ways of installing this plugin, see the zsh-auto-suggestion installation instructions.\n\n\nSyntax Highlighting\nThe zsh-syntax-highlighting plugin enables command highlighting as you type - available and correctly entered commands are coloured green and unavailable/mistyped commands are red. It can be installed in a similar way to zsh-auto-suggestions:\n\nClone the plugin from the GitHub repository into the local custom plugins directory:\n\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git \\\n    ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\nAdd the plugin to your oh-my-zsh configuration as outlined in the adding/modifying plugins section.\n\nAnd you‚Äôre done! For alternative ways of installing the plugin, see the zsh-syntax-highlighting installation instructions.\n\n\n\nAdding/Modifying Plugin Configuration\nYou can add built-in/installed custom plugins, or changing your plugin configuration, as follows:\n\nOpen your .zshrc config file:\n\nopen ~/.zshrc\n\nFind the plugins variable. This should look something like plugins=(... &lt;PLUGIN_NAME&gt; ...). This is a space separated list of activated plugins surrounded by brackets. At the start, this list will likely only contain the git plugin.\nAdd/remove the name(s) of the plugin(s) you‚Äôd like to activate/deactivate. Ensure the list of plugin names is space separated.\nSave your .zshrc configuration file, and restart your terminal session for the changes to take effect."
  },
  {
    "objectID": "blog/posts/oh-my-zsh-setup/index.html#themes",
    "href": "blog/posts/oh-my-zsh-setup/index.html#themes",
    "title": "‚ÄòJazzing Up‚Äô zsh with oh-my-zsh",
    "section": "Themes",
    "text": "Themes\nA list of built-in themes is recorded on the oh-my-zsh website. To change your oh-my-zsh theme, just follow these steps:\n\nOpen your .zshrc config file:\n\nopen ~/.zshrc\n\nFind the ZSH_THEME variable, and change this to match the name of your theme of choice. At the start, this will likely be set to the default built-in theme robbyrussell.\nSave your .zshrc configuration file, and restart your terminal session for the changes to take effect."
  },
  {
    "objectID": "blog/posts/oh-my-zsh-setup/index.html#further-reading-final-thoughts",
    "href": "blog/posts/oh-my-zsh-setup/index.html#further-reading-final-thoughts",
    "title": "‚ÄòJazzing Up‚Äô zsh with oh-my-zsh",
    "section": "Further Reading & Final Thoughts",
    "text": "Further Reading & Final Thoughts\nThe oh-my-zsh website is a great place to go for detailed and up-to-date information.\nAll the available built-in plugins are recorded on the oh-my-zsh website. I find the following plugins helpful: git (aliases), docker (completion support and aliases), gcloud (completion support), python (aliases and virtual environment commands) and terraform (completion support and aliases). This is by no means a complete list though, there are lots to choose from! Try not to add too many plugins at once otherwise you may find the terminal slow, particularly at startup.\nAll the available built-in themes are listed on the oh-my-zsh website. I use the gnzh theme because it is simple, clean and separates the command line onto a separate line - I personally find that easier to read and scan quickly. Some themes are reportedly more easy to customise, like agnoster, but if you aren‚Äôt looking to edit/build your own then the choice of theme is purely personal preference.\nIf you‚Äôre wondering what else oh-my-zsh could offer you, take a look at this great post which gives a quick overview of it‚Äôs main offerings. Also, if you‚Äôre finding your terminal too slow due to lots of plugins and unnecessary ‚Äòbloat‚Äô, you‚Äôre definitely not alone! Check out this interesting article which shows you how to set-up an oh-my-zsh-like terminal without using oh-my-zsh.\n\n\n\n\n\n\nHooray\n\n\n\nüéâ You made it to the end of the first ever heuristic-pedals blog post! Thanks for your time and I hope you found this helpful! üéâ"
  }
]